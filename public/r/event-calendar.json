{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "event-calendar",
  "type": "registry:ui",
  "title": "Event Calendar",
  "description": "A calendar component for displaying events.",
  "dependencies": [
    "date-fns",
    "react-dnd",
    "react-dnd-html5-backend"
  ],
  "registryDependencies": [
    "badge",
    "button",
    "calendar",
    "scroll-area"
  ],
  "files": [
    {
      "path": "src/components/event-calendar.tsx",
      "content": "\"use client\";\nimport { createContext, useContext, useEffect, useMemo, useRef, useState } from \"react\";\nimport type { Dispatch, HTMLAttributes, SetStateAction } from \"react\";\n\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { addDays, addMonths, addWeeks, addYears, areIntervalsOverlapping, differenceInDays, differenceInMilliseconds, differenceInMinutes, eachDayOfInterval, endOfDay, endOfMonth, endOfWeek, endOfYear, format, formatDate, getDaysInMonth, isAfter, isBefore, isSameDay, isSameMonth, isSameWeek, isSameYear, isToday, isWithinInterval, parseISO, startOfDay, startOfMonth, startOfWeek, startOfYear, subDays, subMonths, subWeeks, subYears } from \"date-fns\";\nimport { CalendarIcon, CalendarX2, ChevronLeft, ChevronRight, Clock, Text } from \"lucide-react\";\nimport { useDragLayer, DndProvider, useDrag, useDrop } from \"react-dnd\";\nimport { getEmptyImage, HTML5Backend } from \"react-dnd-html5-backend\";\n\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { cn } from \"@/lib/utils\";\n\nexport type TCalendarView = \"day\" | \"week\" | \"month\" | \"year\" | \"agenda\";\nexport type TEventColor = \"blue\" | \"green\" | \"red\" | \"yellow\" | \"purple\" | \"orange\" | \"gray\";\nexport type TBadgeVariant = \"dot\" | \"colored\" | \"mixed\";\nexport type TWorkingHours = { [key: number]: { from: number; to: number } };\nexport type TVisibleHours = { from: number; to: number };\n\nexport type IEvent = {\n  id: number;\n  startDate: string;\n  endDate: string;\n  title: string;\n  color: TEventColor;\n  description: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n}\n\nexport type ICalendarCell = {\n  day: number;\n  currentMonth: boolean;\n  date: Date;\n}\n\nconst WORKING_HOURS = {\n  0: { from: 0, to: 24 },\n  1: { from: 0, to: 24 },\n  2: { from: 0, to: 24 },\n  3: { from: 0, to: 24 },\n  4: { from: 0, to: 24 },\n  5: { from: 0, to: 24 },\n  6: { from: 0, to: 24 },\n};\n\nconst VISIBLE_HOURS = { from: 0, to: 24 };\n\n\nfunction rangeText(view: TCalendarView, date: Date) {\n  const formatString = \"MMM d, yyyy\";\n  let start: Date;\n  let end: Date;\n\n  switch (view) {\n    case \"agenda\":\n      start = startOfMonth(date);\n      end = endOfMonth(date);\n      break;\n    case \"year\":\n      start = startOfYear(date);\n      end = endOfYear(date);\n      break;\n    case \"month\":\n      start = startOfMonth(date);\n      end = endOfMonth(date);\n      break;\n    case \"week\":\n      start = startOfWeek(date);\n      end = endOfWeek(date);\n      break;\n    case \"day\":\n      return format(date, formatString);\n    default:\n      return \"Error while formatting \";\n  }\n\n  return `${format(start, formatString)} - ${format(end, formatString)}`;\n}\n\nfunction navigateDate(date: Date, view: TCalendarView, direction: \"previous\" | \"next\"): Date {\n  const operations = {\n    agenda: direction === \"next\" ? addMonths : subMonths,\n    year: direction === \"next\" ? addYears : subYears,\n    month: direction === \"next\" ? addMonths : subMonths,\n    week: direction === \"next\" ? addWeeks : subWeeks,\n    day: direction === \"next\" ? addDays : subDays,\n  };\n\n  return operations[view](date, 1);\n}\n\nfunction getEventsCount(events: IEvent[], date: Date, view: TCalendarView): number {\n  const compareFns = {\n    agenda: isSameMonth,\n    year: isSameYear,\n    day: isSameDay,\n    week: isSameWeek,\n    month: isSameMonth,\n  };\n\n  return events.filter(event => compareFns[view](new Date(event.startDate), date)).length;\n}\n\nfunction getCurrentEvents(events: IEvent[]) {\n  const now = new Date();\n  return events.filter(event => isWithinInterval(now, { start: parseISO(event.startDate), end: parseISO(event.endDate) })) || null;\n}\n\nfunction groupEvents(dayEvents: IEvent[]) {\n  const sortedEvents = dayEvents.sort((a, b) => parseISO(a.startDate).getTime() - parseISO(b.startDate).getTime());\n  const groups: IEvent[][] = [];\n\n  for (const event of sortedEvents) {\n    const eventStart = parseISO(event.startDate);\n\n    let placed = false;\n    for (const group of groups) {\n      const lastEventInGroup = group[group.length - 1];\n      const lastEventEnd = parseISO(lastEventInGroup.endDate);\n\n      if (eventStart >= lastEventEnd) {\n        group.push(event);\n        placed = true;\n        break;\n      }\n    }\n\n    if (!placed) groups.push([event]);\n  }\n\n  return groups;\n}\n\nfunction getEventBlockStyle(event: IEvent, day: Date, groupIndex: number, groupSize: number, visibleHoursRange?: { from: number; to: number }) {\n  const startDate = parseISO(event.startDate);\n  const dayStart = new Date(day.setHours(0, 0, 0, 0));\n  const eventStart = startDate < dayStart ? dayStart : startDate;\n  const startMinutes = differenceInMinutes(eventStart, dayStart);\n\n  let top;\n\n  if (visibleHoursRange) {\n    const visibleStartMinutes = visibleHoursRange.from * 60;\n    const visibleEndMinutes = visibleHoursRange.to * 60;\n    const visibleRangeMinutes = visibleEndMinutes - visibleStartMinutes;\n    top = ((startMinutes - visibleStartMinutes) / visibleRangeMinutes) * 100;\n  } else {\n    top = (startMinutes / 1440) * 100;\n  }\n\n  const width = 100 / groupSize;\n  const left = groupIndex * width;\n\n  return { top: `${top}%`, width: `${width}%`, left: `${left}%` };\n}\n\nfunction isWorkingHour(day: Date, hour: number, workingHours: TWorkingHours) {\n  const dayIndex = day.getDay() as keyof typeof workingHours;\n  const dayHours = workingHours[dayIndex];\n  return hour >= dayHours.from && hour < dayHours.to;\n}\n\nfunction getVisibleHours(visibleHours: TVisibleHours, singleDayEvents: IEvent[]) {\n  let earliestEventHour = visibleHours.from;\n  let latestEventHour = visibleHours.to;\n\n  singleDayEvents.forEach(event => {\n    const startHour = parseISO(event.startDate).getHours();\n    const endTime = parseISO(event.endDate);\n    const endHour = endTime.getHours() + (endTime.getMinutes() > 0 ? 1 : 0);\n    if (startHour < earliestEventHour) earliestEventHour = startHour;\n    if (endHour > latestEventHour) latestEventHour = endHour;\n  });\n\n  latestEventHour = Math.min(latestEventHour, 24);\n\n  const hours = Array.from({ length: latestEventHour - earliestEventHour }, (_, i) => i + earliestEventHour);\n\n  return { hours, earliestEventHour, latestEventHour };\n}\n\nfunction getCalendarCells(selectedDate: Date): ICalendarCell[] {\n  const currentYear = selectedDate.getFullYear();\n  const currentMonth = selectedDate.getMonth();\n\n  const getDaysInMonth = (year: number, month: number) => new Date(year, month + 1, 0).getDate();\n  const getFirstDayOfMonth = (year: number, month: number) => new Date(year, month, 1).getDay();\n\n  const daysInMonth = getDaysInMonth(currentYear, currentMonth);\n  const firstDayOfMonth = getFirstDayOfMonth(currentYear, currentMonth);\n  const daysInPrevMonth = getDaysInMonth(currentYear, currentMonth - 1);\n  const totalDays = firstDayOfMonth + daysInMonth;\n\n  const prevMonthCells = Array.from({ length: firstDayOfMonth }, (_, i) => ({\n    day: daysInPrevMonth - firstDayOfMonth + i + 1,\n    currentMonth: false,\n    date: new Date(currentYear, currentMonth - 1, daysInPrevMonth - firstDayOfMonth + i + 1),\n  }));\n\n  const currentMonthCells = Array.from({ length: daysInMonth }, (_, i) => ({\n    day: i + 1,\n    currentMonth: true,\n    date: new Date(currentYear, currentMonth, i + 1),\n  }));\n\n  const nextMonthCells = Array.from({ length: (7 - (totalDays % 7)) % 7 }, (_, i) => ({\n    day: i + 1,\n    currentMonth: false,\n    date: new Date(currentYear, currentMonth + 1, i + 1),\n  }));\n\n  return [...prevMonthCells, ...currentMonthCells, ...nextMonthCells];\n}\n\nfunction calculateMonthEventPositions(multiDayEvents: IEvent[], singleDayEvents: IEvent[], selectedDate: Date) {\n  const monthStart = startOfMonth(selectedDate);\n  const monthEnd = endOfMonth(selectedDate);\n\n  const eventPositions: { [key: string]: number } = {};\n  const occupiedPositions: { [key: string]: boolean[] } = {};\n\n  eachDayOfInterval({ start: monthStart, end: monthEnd }).forEach(day => {\n    occupiedPositions[day.toISOString()] = [false, false, false];\n  });\n\n  const sortedEvents = [\n    ...multiDayEvents.sort((a, b) => {\n      const aDuration = differenceInDays(parseISO(a.endDate), parseISO(a.startDate));\n      const bDuration = differenceInDays(parseISO(b.endDate), parseISO(b.startDate));\n      return bDuration - aDuration || parseISO(a.startDate).getTime() - parseISO(b.startDate).getTime();\n    }),\n    ...singleDayEvents.sort((a, b) => parseISO(a.startDate).getTime() - parseISO(b.startDate).getTime()),\n  ];\n\n  sortedEvents.forEach(event => {\n    const eventStart = parseISO(event.startDate);\n    const eventEnd = parseISO(event.endDate);\n    const eventDays = eachDayOfInterval({\n      start: eventStart < monthStart ? monthStart : eventStart,\n      end: eventEnd > monthEnd ? monthEnd : eventEnd,\n    });\n\n    let position = -1;\n\n    for (let i = 0; i < 3; i++) {\n      if (\n        eventDays.every(day => {\n          const dayPositions = occupiedPositions[startOfDay(day).toISOString()];\n          return dayPositions && !dayPositions[i];\n        })\n      ) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position !== -1) {\n      eventDays.forEach(day => {\n        const dayKey = startOfDay(day).toISOString();\n        occupiedPositions[dayKey][position] = true;\n      });\n      eventPositions[event.id] = position;\n    }\n  });\n\n  return eventPositions;\n}\n\nfunction getMonthCellEvents(date: Date, events: IEvent[], eventPositions: Record<string, number>) {\n  const eventsForDate = events.filter(event => {\n    const eventStart = parseISO(event.startDate);\n    const eventEnd = parseISO(event.endDate);\n    return (date >= eventStart && date <= eventEnd) || isSameDay(date, eventStart) || isSameDay(date, eventEnd);\n  });\n\n  return eventsForDate\n    .map(event => ({\n      ...event,\n      position: eventPositions[event.id] ?? -1,\n      isMultiDay: event.startDate !== event.endDate,\n    }))\n    .sort((a, b) => {\n      if (a.isMultiDay && !b.isMultiDay) return -1;\n      if (!a.isMultiDay && b.isMultiDay) return 1;\n      return a.position - b.position;\n    });\n}\n\nconst EventCalendarContext = createContext({} as {\n  selectedDate: Date;\n  setSelectedDate: (date: Date | undefined) => void;\n  workingHours: TWorkingHours;\n  visibleHours: TVisibleHours;\n  events: IEvent[];\n  setLocalEvents: Dispatch<SetStateAction<IEvent[]>>;\n  view: TCalendarView;\n  badgeVariant: TBadgeVariant;\n  updateEvent: (event: IEvent) => void;\n  singleDayEvents: IEvent[];\n  multiDayEvents: IEvent[];\n  onAdd?: ({ startDate, hour, minute }: { startDate: Date; hour: number; minute: number }) => void;\n  onDrag?: (event: IEvent) => void;\n  onDetail?: (event: IEvent) => void;\n  onViewUpdate?: (view: TCalendarView) => void;\n});\n\nfunction EventCalendarProvider({\n  children,\n  events,\n  workingHours = WORKING_HOURS,\n  visibleHours = VISIBLE_HOURS,\n  view = \"day\",\n  badgeVariant = \"dot\",\n  onAdd,\n  onDrag,\n  onDetail,\n  onViewUpdate,\n}: {\n  children: React.ReactNode;\n  events: IEvent[];\n  workingHours?: TWorkingHours;\n  visibleHours?: TVisibleHours;\n  view?: TCalendarView;\n  badgeVariant?: TBadgeVariant;\n  onAdd?: ({ startDate, hour, minute }: { startDate: Date; hour: number; minute: number }) => void;\n  onDrag?: (event: IEvent) => void;\n  onDetail?: (event: IEvent) => void;\n  onViewUpdate?: (view: TCalendarView) => void;\n}) {\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  // This localEvents doesn't need to exists in a real scenario.\n  // It's used here just to simulate the update of the events.\n  // In a real scenario, the events would be updated in the backend\n  // and the request that fetches the events should be refetched\n  const [localEvents, setLocalEvents] = useState<IEvent[]>(events);\n\n  useEffect(() => {\n    setLocalEvents(events);\n  }, [events]);\n\n  const filteredEvents = useMemo(() => {\n    return localEvents.filter(event => {\n      const eventStartDate = parseISO(event.startDate);\n      const eventEndDate = parseISO(event.endDate);\n\n      if (view === \"year\") {\n        const yearStart = new Date(selectedDate.getFullYear(), 0, 1);\n        const yearEnd = new Date(selectedDate.getFullYear(), 11, 31, 23, 59, 59, 999);\n        const isInSelectedYear = eventStartDate <= yearEnd && eventEndDate >= yearStart;\n        return isInSelectedYear;\n      }\n\n      if (view === \"month\" || view === \"agenda\") {\n        const monthStart = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);\n        const monthEnd = new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1, 0, 23, 59, 59, 999);\n        const isInSelectedMonth = eventStartDate <= monthEnd && eventEndDate >= monthStart;\n        return isInSelectedMonth;\n      }\n\n      if (view === \"week\") {\n        const dayOfWeek = selectedDate.getDay();\n\n        const weekStart = new Date(selectedDate);\n        weekStart.setDate(selectedDate.getDate() - dayOfWeek);\n        weekStart.setHours(0, 0, 0, 0);\n\n        const weekEnd = new Date(weekStart);\n        weekEnd.setDate(weekStart.getDate() + 6);\n        weekEnd.setHours(23, 59, 59, 999);\n\n        const isInSelectedWeek = eventStartDate <= weekEnd && eventEndDate >= weekStart;\n        return isInSelectedWeek;\n      }\n\n      if (view === \"day\") {\n        const dayStart = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate(), 0, 0, 0);\n        const dayEnd = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate(), 23, 59, 59);\n        const isInSelectedDay = eventStartDate <= dayEnd && eventEndDate >= dayStart;\n        return isInSelectedDay;\n      }\n    });\n  }, [selectedDate, localEvents, view]);\n\n  const singleDayEvents = filteredEvents.filter(event => {\n    const startDate = parseISO(event.startDate);\n    const endDate = parseISO(event.endDate);\n    return isSameDay(startDate, endDate);\n  });\n\n  const multiDayEvents = filteredEvents.filter(event => {\n    const startDate = parseISO(event.startDate);\n    const endDate = parseISO(event.endDate);\n    return !isSameDay(startDate, endDate);\n  });\n\n  const handleSelectDate = (date: Date | undefined) => {\n    if (!date) return;\n    setSelectedDate(date);\n  };\n\n  const updateEvent = (event: IEvent) => {\n    onDrag?.(event);\n    const newEvent: IEvent = event;\n\n    newEvent.startDate = new Date(event.startDate).toISOString();\n    newEvent.endDate = new Date(event.endDate).toISOString();\n\n    setLocalEvents(prev => {\n      const index = prev.findIndex(e => e.id === event.id);\n      if (index === -1) return prev;\n      return [...prev.slice(0, index), newEvent, ...prev.slice(index + 1)];\n    });\n  };\n\n  return (\n    <EventCalendarContext.Provider\n      value={{\n        selectedDate,\n        setSelectedDate: handleSelectDate,\n        visibleHours,\n        workingHours,\n        // If you go to the refetch approach, you can remove the localEvents and pass the events directly\n        events: localEvents,\n        setLocalEvents,\n        view,\n        badgeVariant,\n        updateEvent,\n        singleDayEvents,\n        multiDayEvents,\n        onAdd,\n        onDrag,\n        onDetail,\n        onViewUpdate,\n      }}\n    >\n      {children}\n    </EventCalendarContext.Provider>\n  );\n}\n\nfunction useEventCalendar() {\n  const context = useContext(EventCalendarContext);\n  if (!context) throw new Error(\"useEventCalendar must be used within a EventCalendarProvider.\");\n  return context;\n}\n\nfunction CustomDragLayer() {\n  const { isDragging, item, currentOffset, initialOffset, initialClientOffset } = useDragLayer(monitor => ({\n    item: monitor.getItem() as {\n      event: IEvent;\n      children: React.ReactNode;\n      width: number;\n      height: number;\n    } | null,\n    itemType: monitor.getItemType(),\n    isDragging: monitor.isDragging(),\n    currentOffset: monitor.getClientOffset(),\n    initialOffset: monitor.getInitialSourceClientOffset(),\n    initialClientOffset: monitor.getInitialClientOffset(),\n  }));\n\n  if (!isDragging || !item || !currentOffset || !initialOffset || !initialClientOffset) {\n    return null;\n  }\n\n  const offsetX = initialClientOffset.x - initialOffset.x;\n  const offsetY = initialClientOffset.y - initialOffset.y;\n\n  const layerStyles: React.CSSProperties = {\n    position: \"fixed\",\n    pointerEvents: \"none\",\n    zIndex: 100,\n    left: currentOffset.x - offsetX,\n    top: currentOffset.y - offsetY,\n  };\n\n  return (\n    <div style={layerStyles}>\n      <div\n        className=\"\"\n        style={{\n          width: item.width,\n          height: item.height,\n        }}\n      >\n        {item.children}\n      </div>\n    </div>\n  );\n}\n\nfunction DndProviderWrapper({ \n  children \n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <DndProvider backend={HTML5Backend}>\n      {children}\n      <CustomDragLayer />\n    </DndProvider>\n  );\n}\n\nconst ItemTypes = {\n  EVENT: \"event\",\n};\n\nfunction DraggableEvent({ \n  event, \n  children \n}: {\n  event: IEvent;\n  children: React.ReactNode;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [{ isDragging }, drag, preview] = useDrag(() => ({\n    type: ItemTypes.EVENT,\n    item: () => {\n      const width = ref.current?.offsetWidth || 0;\n      const height = ref.current?.offsetHeight || 0;\n      return { event, children, width, height };\n    },\n    collect: monitor => ({ isDragging: monitor.isDragging() }),\n  }));\n\n  // Hide the default drag preview\n  useEffect(() => {\n    preview(getEmptyImage(), { captureDraggingState: true });\n  }, [preview]);\n\n  drag(ref);\n\n  return (\n    <div ref={ref} className={cn(isDragging && \"opacity-40\")}>\n      {children}\n    </div>\n  );\n}\n\nfunction DroppableDayCell({ \n  cell, \n  children \n}: {\n  cell: ICalendarCell;\n  children: React.ReactNode;\n}) {\n  const { updateEvent } = useEventCalendar();\n\n  const [{ isOver, canDrop }, drop] = useDrop(\n    () => ({\n      accept: ItemTypes.EVENT,\n      drop: (item: { event: IEvent }) => {\n        const droppedEvent = item.event;\n\n        const eventStartDate = parseISO(droppedEvent.startDate);\n        const eventEndDate = parseISO(droppedEvent.endDate);\n\n        const eventDurationMs = differenceInMilliseconds(eventEndDate, eventStartDate);\n\n        const newStartDate = new Date(cell.date);\n        newStartDate.setHours(eventStartDate.getHours(), eventStartDate.getMinutes(), eventStartDate.getSeconds(), eventStartDate.getMilliseconds());\n        const newEndDate = new Date(newStartDate.getTime() + eventDurationMs);\n\n        updateEvent({\n          ...droppedEvent,\n          startDate: newStartDate.toISOString(),\n          endDate: newEndDate.toISOString(),\n        });\n\n        return { moved: true };\n      },\n      collect: monitor => ({\n        isOver: monitor.isOver(),\n        canDrop: monitor.canDrop(),\n      }),\n    }),\n    [cell.date, updateEvent]\n  );\n\n  return (\n    <div ref={drop as unknown as React.RefObject<HTMLDivElement>} className={cn(isOver && canDrop && \"bg-accent/50\")}>\n      {children}\n    </div>\n  );\n}\n\nfunction DroppableTimeBlock({ \n  date, \n  hour, \n  minute, \n  children \n}: {\n  date: Date;\n  hour: number;\n  minute: number;\n  children: React.ReactNode;\n}) {\n  const { updateEvent } = useEventCalendar();\n\n  const [{ isOver, canDrop }, drop] = useDrop(\n    () => ({\n      accept: ItemTypes.EVENT,\n      drop: (item: { event: IEvent }) => {\n        const droppedEvent = item.event;\n\n        const eventStartDate = parseISO(droppedEvent.startDate);\n        const eventEndDate = parseISO(droppedEvent.endDate);\n\n        const eventDurationMs = differenceInMilliseconds(eventEndDate, eventStartDate);\n\n        const newStartDate = new Date(date);\n        newStartDate.setHours(hour, minute, 0, 0);\n        const newEndDate = new Date(newStartDate.getTime() + eventDurationMs);\n\n        updateEvent({\n          ...droppedEvent,\n          startDate: newStartDate.toISOString(),\n          endDate: newEndDate.toISOString(),\n        });\n\n        return { moved: true };\n      },\n      collect: monitor => ({\n        isOver: monitor.isOver(),\n        canDrop: monitor.canDrop(),\n      }),\n    }),\n    [date, hour, minute, updateEvent]\n  );\n\n  return (\n    <div ref={drop as unknown as React.RefObject<HTMLDivElement>} className={cn(\"h-[24px]\", isOver && canDrop && \"bg-accent/50\")}>\n      {children}\n    </div>\n  );\n}\n\nexport function EventCalendarRoot({\n  children,\n  ...props\n}: {\n  children: React.ReactNode;\n  events: IEvent[];\n  workingHours?: TWorkingHours;\n  visibleHours?: TVisibleHours;\n  view?: TCalendarView;\n  badgeVariant?: TBadgeVariant;\n  onAdd?: ({ startDate, hour, minute }: { startDate: Date; hour: number; minute: number }) => void;\n  onDrag?: (event: IEvent) => void;\n  onDetail?: (event: IEvent) => void;\n  onViewUpdate?: (view: TCalendarView) => void;\n}) {\n  return (\n    <EventCalendarProvider {...props}>\n      <div className=\"overflow-hidden rounded-xl border\">{children}</div>\n    </EventCalendarProvider>\n  )\n}\n\nexport function EventCalendarContainer({\n  children\n}: {\n  children: React.ReactNode;\n}) {\n  return <DndProviderWrapper>{children}</DndProviderWrapper>;\n}\n\nexport function EventCalendarHeader({\n  children\n}: {\n  children: React.ReactNode;\n}) {\n  const { selectedDate, setSelectedDate, events, view } = useEventCalendar();\n\n  const today = new Date();\n  const handleClick = () => setSelectedDate(today);\n\n  const month = formatDate(selectedDate, \"MMMM\");\n  const year = selectedDate.getFullYear();\n\n  const eventCount = useMemo(() => getEventsCount(events, selectedDate, view), [events, selectedDate, view]);\n\n  const handlePrevious = () => setSelectedDate(navigateDate(selectedDate, view, \"previous\"));\n  const handleNext = () => setSelectedDate(navigateDate(selectedDate, view, \"next\"));\n\n  return (\n    <div className=\"flex flex-col gap-4 border-b p-4 lg:flex-row lg:items-center lg:justify-between\">\n      <div className=\"flex-1 flex items-center gap-3\">\n        <button\n          className=\"flex size-14 flex-col items-start overflow-hidden rounded-lg border focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\n          onClick={handleClick}\n        >\n          <p className=\"flex h-6 w-full items-center justify-center bg-primary text-center text-xs font-semibold text-primary-foreground\">\n            {formatDate(today, \"MMM\").toUpperCase()}\n          </p>\n          <p className=\"flex w-full items-center justify-center text-lg font-bold\">{today.getDate()}</p>\n        </button>\n\n        <div className=\"space-y-0.5\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-lg font-semibold\">\n              {month} {year}\n            </span>\n            <Badge variant=\"outline\" className=\"px-1.5\">\n              {eventCount} events\n            </Badge>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" className=\"size-6.5 px-0 [&_svg]:size-4.5\" onClick={handlePrevious}>\n              <ChevronLeft />\n            </Button>\n\n            <p className=\"text-sm text-muted-foreground\">{rangeText(view, selectedDate)}</p>\n\n            <Button variant=\"outline\" className=\"size-6.5 px-0 [&_svg]:size-4.5\" onClick={handleNext}>\n              <ChevronRight />\n            </Button>\n          </div>\n        </div>\n      </div>\n      {children}\n    </div>\n  );\n}\n\nconst agendaEventCardVariants = cva(\n  \"flex select-none items-center justify-between gap-3 rounded-md border p-3 text-sm focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\",\n  {\n    variants: {\n      color: {\n        // Colored variants\n        blue: \"border-blue-200 bg-blue-50 text-blue-700 dark:border-blue-800 dark:bg-blue-950 dark:text-blue-300 [&_.event-dot]:fill-blue-600\",\n        green: \"border-green-200 bg-green-50 text-green-700 dark:border-green-800 dark:bg-green-950 dark:text-green-300 [&_.event-dot]:fill-green-600\",\n        red: \"border-red-200 bg-red-50 text-red-700 dark:border-red-800 dark:bg-red-950 dark:text-red-300 [&_.event-dot]:fill-red-600\",\n        yellow: \"border-yellow-200 bg-yellow-50 text-yellow-700 dark:border-yellow-800 dark:bg-yellow-950 dark:text-yellow-300 [&_.event-dot]:fill-yellow-600\",\n        purple: \"border-purple-200 bg-purple-50 text-purple-700 dark:border-purple-800 dark:bg-purple-950 dark:text-purple-300 [&_.event-dot]:fill-purple-600\",\n        orange: \"border-orange-200 bg-orange-50 text-orange-700 dark:border-orange-800 dark:bg-orange-950 dark:text-orange-300 [&_.event-dot]:fill-orange-600\",\n        gray: \"border-neutral-200 bg-neutral-50 text-neutral-900 dark:border-neutral-700 dark:bg-neutral-900 dark:text-neutral-300 [&_.event-dot]:fill-neutral-600\",\n\n        // Dot variants\n        \"blue-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-blue-600\",\n        \"green-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-green-600\",\n        \"red-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-red-600\",\n        \"orange-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-orange-600\",\n        \"purple-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-purple-600\",\n        \"yellow-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-yellow-600\",\n        \"gray-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-neutral-600\",\n      },\n    },\n    defaultVariants: {\n      color: \"blue-dot\",\n    },\n  }\n);\n\nfunction AgendaEventCard({\n  event,\n  eventCurrentDay,\n  eventTotalDays\n}: {\n  event: IEvent;\n  eventCurrentDay?: number;\n  eventTotalDays?: number;\n}) {\n  const { badgeVariant, onDetail } = useEventCalendar();\n\n  const startDate = parseISO(event.startDate);\n  const endDate = parseISO(event.endDate);\n\n  const color = (badgeVariant === \"dot\" ? `${event.color}-dot` : event.color) as VariantProps<typeof agendaEventCardVariants>[\"color\"];\n\n  const agendaEventCardClasses = agendaEventCardVariants({ color });\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" || e.key === \" \") {\n      e.preventDefault();\n      if (e.currentTarget instanceof HTMLElement) e.currentTarget.click();\n    }\n  };\n\n  return (\n    <div role=\"button\" tabIndex={0} className={agendaEventCardClasses} onKeyDown={handleKeyDown} onClick={() => onDetail?.(event)}>\n      <div className=\"flex flex-col gap-2\">\n        <div className=\"flex items-center gap-1.5\">\n          {[\"mixed\", \"dot\"].includes(badgeVariant) && (\n            <svg width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" className=\"event-dot shrink-0\">\n              <circle cx=\"4\" cy=\"4\" r=\"4\" />\n            </svg>\n          )}\n\n          <p className=\"font-medium\">\n            {eventCurrentDay && eventTotalDays && (\n              <span className=\"mr-1 text-xs\">\n                Day {eventCurrentDay} of {eventTotalDays} •{\" \"}\n              </span>\n            )}\n            {event.title}\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-1\">\n          <Clock className=\"size-3 shrink-0\" />\n          <p className=\"text-xs text-foreground\">\n            {format(startDate, \"h:mm a\")} - {format(endDate, \"h:mm a\")}\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-1\">\n          <Text className=\"size-3 shrink-0\" />\n          <p className=\"text-xs text-foreground\">{event.description}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction AgendaDayGroup({\n  date,\n  events,\n  multiDayEvents\n}: {\n  date: Date;\n  events: IEvent[];\n  multiDayEvents: IEvent[]\n}) {\n  const sortedEvents = [...events].sort((a, b) => new Date(a.startDate).getTime() - new Date(b.startDate).getTime());\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"sticky top-0 flex items-center gap-4 bg-background py-2\">\n        <p className=\"text-sm font-semibold\">{format(date, \"EEEE, MMMM d, yyyy\")}</p>\n      </div>\n\n      <div className=\"space-y-2\">\n        {multiDayEvents.length > 0 &&\n          multiDayEvents.map(event => {\n            const eventStart = startOfDay(parseISO(event.startDate));\n            const eventEnd = startOfDay(parseISO(event.endDate));\n            const currentDate = startOfDay(date);\n\n            const eventTotalDays = differenceInDays(eventEnd, eventStart) + 1;\n            const eventCurrentDay = differenceInDays(currentDate, eventStart) + 1;\n            return <AgendaEventCard key={event.id} event={event} eventCurrentDay={eventCurrentDay} eventTotalDays={eventTotalDays} />;\n          })}\n\n        {sortedEvents.length > 0 && sortedEvents.map(event => <AgendaEventCard key={event.id} event={event} />)}\n      </div>\n    </div>\n  );\n}\n\nexport function EventCalendarAgendaView() {\n  const { selectedDate, singleDayEvents, multiDayEvents, view } = useEventCalendar();\n\n  const eventsByDay = useMemo(() => {\n    const allDates = new Map<string, { date: Date; events: IEvent[]; multiDayEvents: IEvent[] }>();\n\n    singleDayEvents.forEach(event => {\n      const eventDate = parseISO(event.startDate);\n      if (!isSameMonth(eventDate, selectedDate)) return;\n\n      const dateKey = format(eventDate, \"yyyy-MM-dd\");\n\n      if (!allDates.has(dateKey)) {\n        allDates.set(dateKey, { date: startOfDay(eventDate), events: [], multiDayEvents: [] });\n      }\n\n      allDates.get(dateKey)?.events.push(event);\n    });\n\n    multiDayEvents.forEach(event => {\n      const eventStart = parseISO(event.startDate);\n      const eventEnd = parseISO(event.endDate);\n\n      let currentDate = startOfDay(eventStart);\n      const lastDate = endOfDay(eventEnd);\n\n      while (currentDate <= lastDate) {\n        if (isSameMonth(currentDate, selectedDate)) {\n          const dateKey = format(currentDate, \"yyyy-MM-dd\");\n\n          if (!allDates.has(dateKey)) {\n            allDates.set(dateKey, { date: new Date(currentDate), events: [], multiDayEvents: [] });\n          }\n\n          allDates.get(dateKey)?.multiDayEvents.push(event);\n        }\n        currentDate = new Date(currentDate.setDate(currentDate.getDate() + 1));\n      }\n    });\n\n    return Array.from(allDates.values()).sort((a, b) => a.date.getTime() - b.date.getTime());\n  }, [singleDayEvents, multiDayEvents, selectedDate]);\n\n  if (view !== \"agenda\") return null;\n\n  const hasAnyEvents = singleDayEvents.length > 0 || multiDayEvents.length > 0;\n\n  return (\n    <div className=\"h-[800px]\">\n      <ScrollArea className=\"h-full\" type=\"always\">\n        <div className=\"space-y-6 p-4\">\n          {eventsByDay.map(dayGroup => (\n            <AgendaDayGroup key={format(dayGroup.date, \"yyyy-MM-dd\")} date={dayGroup.date} events={dayGroup.events} multiDayEvents={dayGroup.multiDayEvents} />\n          ))}\n\n          {!hasAnyEvents && (\n            <div className=\"flex flex-col items-center justify-center gap-2 py-20 text-muted-foreground\">\n              <CalendarX2 className=\"size-10\" />\n              <p className=\"text-sm md:text-base\">No events scheduled for the selected month</p>\n            </div>\n          )}\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}\n\nfunction YearViewDayCell({\n  day,\n  date,\n  events\n}: {\n  day: number;\n  date: Date;\n  events: IEvent[]\n}) {\n  const { setSelectedDate, onViewUpdate } = useEventCalendar();\n\n  const maxIndicators = 3;\n  const eventCount = events.length;\n\n  const handleClick = () => {\n    setSelectedDate(date);\n    onViewUpdate?.(\"day\");\n  };\n\n  return (\n    <button\n      onClick={handleClick}\n      type=\"button\"\n      className=\"flex h-11 flex-1 flex-col items-center justify-start gap-0.5 rounded-md pt-1 hover:bg-accent focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\n    >\n      <div\n        className={cn(\n          \"flex size-6 items-center justify-center rounded-full text-xs font-medium\",\n          isToday(date) && \"bg-primary font-semibold text-primary-foreground\"\n        )}\n      >\n        {day}\n      </div>\n\n      {eventCount > 0 && (\n        <div className=\"mt-0.5 flex gap-0.5\">\n          {eventCount <= maxIndicators ? (\n            events.map(event => (\n              <div\n                key={event.id}\n                className={cn(\n                  \"size-1.5 rounded-full\",\n                  event.color === \"blue\" && \"bg-blue-600\",\n                  event.color === \"green\" && \"bg-green-600\",\n                  event.color === \"red\" && \"bg-red-600\",\n                  event.color === \"yellow\" && \"bg-yellow-600\",\n                  event.color === \"purple\" && \"bg-purple-600\",\n                  event.color === \"orange\" && \"bg-orange-600\",\n                  event.color === \"gray\" && \"bg-neutral-600\"\n                )}\n              />\n            ))\n          ) : (\n            <>\n              <div\n                className={cn(\n                  \"size-1.5 rounded-full\",\n                  events[0].color === \"blue\" && \"bg-blue-600\",\n                  events[0].color === \"green\" && \"bg-green-600\",\n                  events[0].color === \"red\" && \"bg-red-600\",\n                  events[0].color === \"yellow\" && \"bg-yellow-600\",\n                  events[0].color === \"purple\" && \"bg-purple-600\",\n                  events[0].color === \"orange\" && \"bg-orange-600\"\n                )}\n              />\n              <span className=\"text-[7px] text-muted-foreground\">+{eventCount - 1}</span>\n            </>\n          )}\n        </div>\n      )}\n    </button>\n  );\n}\n\nfunction YearViewMonth({\n  month,\n  events\n}: {\n  month: Date;\n  events: IEvent[]\n}) {\n  const { setSelectedDate, onViewUpdate } = useEventCalendar();\n\n  const monthName = format(month, \"MMMM\");\n\n  const daysInMonth = useMemo(() => {\n    const totalDays = getDaysInMonth(month);\n    const firstDay = startOfMonth(month).getDay();\n\n    const days = Array.from({ length: totalDays }, (_, i) => i + 1);\n    const blanks = Array(firstDay).fill(null);\n\n    return [...blanks, ...days];\n  }, [month]);\n\n  const weekDays = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\n  const handleClick = () => {\n    setSelectedDate(new Date(month.getFullYear(), month.getMonth(), 1));\n    onViewUpdate?.(\"month\");\n  };\n\n  return (\n    <div className=\"flex flex-col\">\n      <button\n        type=\"button\"\n        onClick={handleClick}\n        className=\"w-full rounded-t-lg border px-3 py-2 text-sm font-semibold hover:bg-accent focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\n      >\n        {monthName}\n      </button>\n\n      <div className=\"flex-1 space-y-2 rounded-b-lg border border-t-0 p-3\">\n        <div className=\"grid grid-cols-7 gap-x-0.5 text-center\">\n          {weekDays.map((day, index) => (\n            <div key={index} className=\"text-xs font-medium text-muted-foreground\">\n              {day}\n            </div>\n          ))}\n        </div>\n\n        <div className=\"grid grid-cols-7 gap-x-0.5 gap-y-2\">\n          {daysInMonth.map((day, index) => {\n            if (day === null) return <div key={`blank-${index}`} className=\"h-10\" />;\n\n            const date = new Date(month.getFullYear(), month.getMonth(), day);\n            const dayEvents = events.filter(event => isSameDay(parseISO(event.startDate), date) || isSameDay(parseISO(event.endDate), date));\n\n            return <YearViewDayCell key={`day-${day}`} day={day} date={date} events={dayEvents} />;\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport function EventCalendarYearView() {\n  const { selectedDate, singleDayEvents, multiDayEvents, view } = useEventCalendar();\n\n  const months = useMemo(() => {\n    const yearStart = startOfYear(selectedDate);\n    return Array.from({ length: 12 }, (_, i) => addMonths(yearStart, i));\n  }, [selectedDate]);\n\n  if (view !== \"year\") return null;\n\n  const allEvents = [...singleDayEvents, ...multiDayEvents];\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n        {months.map(month => (\n          <YearViewMonth key={month.toString()} month={month} events={allEvents} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nconst WEEK_DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\nconst MAX_VISIBLE_EVENTS = 3;\n\nfunction MonthEventBadge({\n  event,\n  cellDate,\n  eventCurrentDay,\n  eventTotalDays,\n  className,\n  position: propPosition\n}: {\n  event: IEvent;\n  cellDate: Date;\n  eventCurrentDay?: number;\n  eventTotalDays?: number;\n  className?: string;\n  position?: \"first\" | \"middle\" | \"last\" | \"none\";\n} & Omit<VariantProps<typeof eventBadgeVariants>, \"color\" | \"multiDayPosition\">) {\n  const { badgeVariant, onDetail } = useEventCalendar();\n\n  const itemStart = startOfDay(parseISO(event.startDate));\n  const itemEnd = endOfDay(parseISO(event.endDate));\n\n  if (cellDate < itemStart || cellDate > itemEnd) return null;\n\n  let position: \"first\" | \"middle\" | \"last\" | \"none\" | undefined;\n\n  if (propPosition) {\n    position = propPosition;\n  } else if (eventCurrentDay && eventTotalDays) {\n    position = \"none\";\n  } else if (isSameDay(itemStart, itemEnd)) {\n    position = \"none\";\n  } else if (isSameDay(cellDate, itemStart)) {\n    position = \"first\";\n  } else if (isSameDay(cellDate, itemEnd)) {\n    position = \"last\";\n  } else {\n    position = \"middle\";\n  }\n\n  const renderBadgeText = [\"first\", \"none\"].includes(position);\n\n  const color = (badgeVariant === \"dot\" ? `${event.color}-dot` : event.color) as VariantProps<typeof eventBadgeVariants>[\"color\"];\n\n  const eventBadgeClasses = cn(eventBadgeVariants({ color, multiDayPosition: position, className }));\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" || e.key === \" \") {\n      e.preventDefault();\n      if (e.currentTarget instanceof HTMLElement) e.currentTarget.click();\n    }\n  };\n\n  return (\n    <DraggableEvent event={event}>\n      <div role=\"button\" tabIndex={0} className={eventBadgeClasses} onKeyDown={handleKeyDown} onClick={() => onDetail?.(event)}>\n        <div className=\"flex items-center gap-1.5 truncate\">\n          {![\"middle\", \"last\"].includes(position) && [\"mixed\", \"dot\"].includes(badgeVariant) && (\n            <svg width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" className=\"event-dot shrink-0\">\n              <circle cx=\"4\" cy=\"4\" r=\"4\" />\n            </svg>\n          )}\n\n          {renderBadgeText && (\n            <p className=\"flex-1 truncate font-semibold\">\n              {eventCurrentDay && (\n                <span className=\"text-xs\">\n                  Day {eventCurrentDay} of {eventTotalDays} •{\" \"}\n                </span>\n              )}\n              {event.title}\n            </p>\n          )}\n        </div>\n\n        {renderBadgeText && <span>{format(new Date(event.startDate), \"h:mm a\")}</span>}\n      </div>\n    </DraggableEvent>\n  );\n}\n\nconst eventBulletVariants = cva(\"size-2 rounded-full\", {\n  variants: {\n    color: {\n      blue: \"bg-blue-600 dark:bg-blue-500\",\n      green: \"bg-green-600 dark:bg-green-500\",\n      red: \"bg-red-600 dark:bg-red-500\",\n      yellow: \"bg-yellow-600 dark:bg-yellow-500\",\n      purple: \"bg-purple-600 dark:bg-purple-500\",\n      gray: \"bg-neutral-600 dark:bg-neutral-500\",\n      orange: \"bg-orange-600 dark:bg-orange-500\",\n    },\n  },\n  defaultVariants: {\n    color: \"blue\",\n  },\n});\n\nfunction EventBullet({\n  color,\n  className\n}: {\n  color: TEventColor;\n  className: string\n}) {\n  return <div className={cn(eventBulletVariants({ color, className }))} />;\n}\n\nfunction DayCell({\n  cell,\n  events,\n  eventPositions\n}: {\n  cell: ICalendarCell;\n  events: IEvent[];\n  eventPositions: Record<string, number>;\n}) {\n  const { setSelectedDate, onViewUpdate } = useEventCalendar();\n\n  const { day, currentMonth, date } = cell;\n\n  const cellEvents = useMemo(() => getMonthCellEvents(date, events, eventPositions), [date, events, eventPositions]);\n  const isSunday = date.getDay() === 0;\n\n  const handleClick = () => {\n    setSelectedDate(date);\n    onViewUpdate?.(\"day\");\n  };\n\n  return (\n    <DroppableDayCell cell={cell}>\n      <div className={cn(\"flex h-full flex-col gap-1 border-l border-t py-1.5 lg:pb-2 lg:pt-1\", isSunday && \"border-l-0\")}>\n        <button\n          onClick={handleClick}\n          className={cn(\n            \"flex size-6 translate-x-1 items-center justify-center rounded-full text-xs font-semibold hover:bg-accent focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring lg:px-2\",\n            !currentMonth && \"opacity-20\",\n            isToday(date) && \"bg-primary font-bold text-primary-foreground hover:bg-primary\"\n          )}\n        >\n          {day}\n        </button>\n\n        <div className={cn(\"flex h-6 gap-1 px-2 lg:h-[94px] lg:flex-col lg:gap-2 lg:px-0\", !currentMonth && \"opacity-50\")}>\n          {[0, 1, 2].map(position => {\n            const event = cellEvents.find(e => e.position === position);\n            const eventKey = event ? `event-${event.id}-${position}` : `empty-${position}`;\n\n            return (\n              <div key={eventKey} className=\"lg:flex-1\">\n                {event && (\n                  <>\n                    <EventBullet className=\"lg:hidden\" color={event.color} />\n                    <MonthEventBadge className=\"hidden lg:flex\" event={event} cellDate={startOfDay(date)} />\n                  </>\n                )}\n              </div>\n            );\n          })}\n        </div>\n\n        {cellEvents.length > MAX_VISIBLE_EVENTS && (\n          <p className={cn(\"h-4.5 px-1.5 text-xs font-semibold text-muted-foreground\", !currentMonth && \"opacity-50\")}>\n            <span className=\"sm:hidden\">+{cellEvents.length - MAX_VISIBLE_EVENTS}</span>\n            <span className=\"hidden sm:inline\"> {cellEvents.length - MAX_VISIBLE_EVENTS} more...</span>\n          </p>\n        )}\n      </div>\n    </DroppableDayCell>\n  );\n}\n\nexport function EventCalendarMonthView() {\n  const { selectedDate, multiDayEvents, singleDayEvents, view } = useEventCalendar();\n\n  const allEvents = [...multiDayEvents, ...singleDayEvents];\n\n  const cells = useMemo(() => getCalendarCells(selectedDate), [selectedDate]);\n\n  const eventPositions = useMemo(\n    () => calculateMonthEventPositions(multiDayEvents, singleDayEvents, selectedDate),\n    [multiDayEvents, singleDayEvents, selectedDate]\n  );\n\n  if (view !== \"month\") return null;\n\n  return (\n    <div>\n      <div className=\"grid grid-cols-7 divide-x\">\n        {WEEK_DAYS.map(day => (\n          <div key={day} className=\"flex items-center justify-center py-2\">\n            <span className=\"text-xs font-medium text-muted-foreground\">{day}</span>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-7 overflow-hidden\">\n        {cells.map(cell => (\n          <DayCell key={cell.date.toISOString()} cell={cell} events={allEvents} eventPositions={eventPositions} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction CalendarTimeline({\n  firstVisibleHour,\n  lastVisibleHour\n}: {\n  firstVisibleHour: number;\n  lastVisibleHour: number\n}) {\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    const timer = setInterval(() => setCurrentTime(new Date()), 60 * 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const getCurrentTimePosition = () => {\n    const minutes = currentTime.getHours() * 60 + currentTime.getMinutes();\n\n    const visibleStartMinutes = firstVisibleHour * 60;\n    const visibleEndMinutes = lastVisibleHour * 60;\n    const visibleRangeMinutes = visibleEndMinutes - visibleStartMinutes;\n\n    return ((minutes - visibleStartMinutes) / visibleRangeMinutes) * 100;\n  };\n\n  const formatCurrentTime = () => {\n    return format(currentTime, \"h:mm a\");\n  };\n\n  const currentHour = currentTime.getHours();\n  if (currentHour < firstVisibleHour || currentHour >= lastVisibleHour) return null;\n\n  return (\n    <div className=\"pointer-events-none absolute inset-x-0 z-50 border-t border-primary\" style={{ top: `${getCurrentTimePosition()}%` }}>\n      <div className=\"absolute left-0 top-0 size-3 -translate-x-1/2 -translate-y-1/2 rounded-full bg-primary\"></div>\n      <div className=\"absolute -left-18 flex w-16 -translate-y-1/2 justify-end bg-background pr-1 text-xs font-medium text-primary\">{formatCurrentTime()}</div>\n    </div>\n  );\n}\n\nconst calendarWeekEventCardVariants = cva(\n  \"flex select-none flex-col gap-0.5 truncate whitespace-nowrap rounded-md border px-2 py-1.5 text-xs focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\",\n  {\n    variants: {\n      color: {\n        // Colored and mixed variants\n        blue: \"border-blue-200 bg-blue-50 text-blue-700 dark:border-blue-800 dark:bg-blue-950 dark:text-blue-300 [&_.event-dot]:fill-blue-600\",\n        green: \"border-green-200 bg-green-50 text-green-700 dark:border-green-800 dark:bg-green-950 dark:text-green-300 [&_.event-dot]:fill-green-600\",\n        red: \"border-red-200 bg-red-50 text-red-700 dark:border-red-800 dark:bg-red-950 dark:text-red-300 [&_.event-dot]:fill-red-600\",\n        yellow: \"border-yellow-200 bg-yellow-50 text-yellow-700 dark:border-yellow-800 dark:bg-yellow-950 dark:text-yellow-300 [&_.event-dot]:fill-yellow-600\",\n        purple: \"border-purple-200 bg-purple-50 text-purple-700 dark:border-purple-800 dark:bg-purple-950 dark:text-purple-300 [&_.event-dot]:fill-purple-600\",\n        orange: \"border-orange-200 bg-orange-50 text-orange-700 dark:border-orange-800 dark:bg-orange-950 dark:text-orange-300 [&_.event-dot]:fill-orange-600\",\n        gray: \"border-neutral-200 bg-neutral-50 text-neutral-700 dark:border-neutral-700 dark:bg-neutral-900 dark:text-neutral-300 [&_.event-dot]:fill-neutral-600\",\n\n        // Dot variants\n        \"blue-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-blue-600\",\n        \"green-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-green-600\",\n        \"red-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-red-600\",\n        \"orange-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-orange-600\",\n        \"purple-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-purple-600\",\n        \"yellow-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-yellow-600\",\n        \"gray-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-neutral-600\",\n      },\n    },\n    defaultVariants: {\n      color: \"blue-dot\",\n    },\n  }\n);\n\nfunction EventBlock({\n  event,\n  className\n}: {\n  event: IEvent;\n} & (HTMLAttributes<HTMLDivElement> & Omit<VariantProps<typeof calendarWeekEventCardVariants>, \"color\">)) {\n  const { badgeVariant, onDetail } = useEventCalendar();\n\n  const start = parseISO(event.startDate);\n  const end = parseISO(event.endDate);\n  const durationInMinutes = differenceInMinutes(end, start);\n  const heightInPixels = (durationInMinutes / 60) * 96 - 8;\n\n  const color = (badgeVariant === \"dot\" ? `${event.color}-dot` : event.color) as VariantProps<typeof calendarWeekEventCardVariants>[\"color\"];\n\n  const calendarWeekEventCardClasses = cn(calendarWeekEventCardVariants({ color, className }), durationInMinutes < 35 && \"py-0 justify-center\");\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" || e.key === \" \") {\n      e.preventDefault();\n      if (e.currentTarget instanceof HTMLElement) e.currentTarget.click();\n    }\n  };\n\n  return (\n    <DraggableEvent event={event}>\n      <div role=\"button\" tabIndex={0} className={calendarWeekEventCardClasses} style={{ height: `${heightInPixels}px` }} onKeyDown={handleKeyDown} onClick={() => onDetail?.(event)}>\n        <div className=\"flex items-center gap-1.5 truncate\">\n          {[\"mixed\", \"dot\"].includes(badgeVariant) && (\n            <svg width=\"8\" height=\"8\" viewBox=\"0 0 8 8\" className=\"event-dot shrink-0\">\n              <circle cx=\"4\" cy=\"4\" r=\"4\" />\n            </svg>\n          )}\n\n          <p className=\"truncate font-semibold\">{event.title}</p>\n        </div>\n\n        {durationInMinutes > 25 && (\n          <p>\n            {format(start, \"h:mm a\")} - {format(end, \"h:mm a\")}\n          </p>\n        )}\n      </div>\n    </DraggableEvent>\n  );\n}\n\nfunction DayViewMultiDayEventsRow({\n  selectedDate,\n  multiDayEvents\n}: {\n  selectedDate: Date;\n  multiDayEvents: IEvent[];\n}) {\n  const dayStart = startOfDay(selectedDate);\n  const dayEnd = endOfDay(selectedDate);\n\n  const multiDayEventsInDay = multiDayEvents\n    .filter(event => {\n      const eventStart = parseISO(event.startDate);\n      const eventEnd = parseISO(event.endDate);\n\n      const isOverlapping =\n        isWithinInterval(dayStart, { start: eventStart, end: eventEnd }) ||\n        isWithinInterval(dayEnd, { start: eventStart, end: eventEnd }) ||\n        (eventStart <= dayStart && eventEnd >= dayEnd);\n\n      return isOverlapping;\n    })\n    .sort((a, b) => {\n      const durationA = differenceInDays(parseISO(a.endDate), parseISO(a.startDate));\n      const durationB = differenceInDays(parseISO(b.endDate), parseISO(b.startDate));\n      return durationB - durationA;\n    });\n\n  if (multiDayEventsInDay.length === 0) return null;\n\n  return (\n    <div className=\"flex border-b\">\n      <div className=\"w-18\"></div>\n      <div className=\"flex flex-1 flex-col gap-1 border-l py-1\">\n        {multiDayEventsInDay.map(event => {\n          const eventStart = startOfDay(parseISO(event.startDate));\n          const eventEnd = startOfDay(parseISO(event.endDate));\n          const currentDate = startOfDay(selectedDate);\n\n          const eventTotalDays = differenceInDays(eventEnd, eventStart) + 1;\n          const eventCurrentDay = differenceInDays(currentDate, eventStart) + 1;\n\n          return <MonthEventBadge key={event.id} event={event} cellDate={selectedDate} eventCurrentDay={eventCurrentDay} eventTotalDays={eventTotalDays} />;\n        })}\n      </div>\n    </div>\n  );\n}\n\nconst eventBadgeVariants = cva(\n  \"mx-1 flex size-auto h-6.5 select-none items-center justify-between gap-1.5 truncate whitespace-nowrap rounded-md border px-2 text-xs focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\",\n  {\n    variants: {\n      color: {\n        // Colored and mixed variants\n        blue: \"border-blue-200 bg-blue-50 text-blue-700 dark:border-blue-800 dark:bg-blue-950 dark:text-blue-300 [&_.event-dot]:fill-blue-600\",\n        green: \"border-green-200 bg-green-50 text-green-700 dark:border-green-800 dark:bg-green-950 dark:text-green-300 [&_.event-dot]:fill-green-600\",\n        red: \"border-red-200 bg-red-50 text-red-700 dark:border-red-800 dark:bg-red-950 dark:text-red-300 [&_.event-dot]:fill-red-600\",\n        yellow: \"border-yellow-200 bg-yellow-50 text-yellow-700 dark:border-yellow-800 dark:bg-yellow-950 dark:text-yellow-300 [&_.event-dot]:fill-yellow-600\",\n        purple: \"border-purple-200 bg-purple-50 text-purple-700 dark:border-purple-800 dark:bg-purple-950 dark:text-purple-300 [&_.event-dot]:fill-purple-600\",\n        orange: \"border-orange-200 bg-orange-50 text-orange-700 dark:border-orange-800 dark:bg-orange-950 dark:text-orange-300 [&_.event-dot]:fill-orange-600\",\n        gray: \"border-neutral-200 bg-neutral-50 text-neutral-900 dark:border-neutral-700 dark:bg-neutral-900 dark:text-neutral-300 [&_.event-dot]:fill-neutral-600\",\n\n        // Dot variants\n        \"blue-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-blue-600\",\n        \"green-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-green-600\",\n        \"red-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-red-600\",\n        \"yellow-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-yellow-600\",\n        \"purple-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-purple-600\",\n        \"orange-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-orange-600\",\n        \"gray-dot\": \"bg-neutral-50 dark:bg-neutral-900 [&_.event-dot]:fill-neutral-600\",\n      },\n      multiDayPosition: {\n        first: \"relative z-10 mr-0 w-[calc(100%_-_3px)] rounded-r-none border-r-0 [&>span]:mr-2.5\",\n        middle: \"relative z-10 mx-0 w-[calc(100%_+_1px)] rounded-none border-x-0\",\n        last: \"ml-0 rounded-l-none border-l-0\",\n        none: \"\",\n      },\n    },\n    defaultVariants: {\n      color: \"blue-dot\",\n    },\n  }\n);\n\nexport function EventCalendarWeekView() {\n  const { selectedDate, workingHours, visibleHours, singleDayEvents, multiDayEvents, view, onAdd } = useEventCalendar();\n\n  if (view !== \"week\") return null;\n\n  const { hours, earliestEventHour, latestEventHour } = getVisibleHours(visibleHours, singleDayEvents);\n\n  const weekStart = startOfWeek(selectedDate);\n  const weekDays = Array.from({ length: 7 }, (_, i) => addDays(weekStart, i));\n\n  return (\n    <>\n      <div className=\"flex flex-col items-center justify-center border-b py-4 text-sm text-muted-foreground sm:hidden\">\n        <p>Weekly view is not available on smaller devices.</p>\n        <p>Please switch to daily or monthly view.</p>\n      </div>\n\n      <div className=\"hidden flex-col sm:flex\">\n        <div>\n          <WeekViewMultiDayEventsRow selectedDate={selectedDate} multiDayEvents={multiDayEvents} />\n\n          {/* Week header */}\n          <div className=\"relative z-20 flex border-b\">\n            <div className=\"w-18\"></div>\n            <div className=\"grid flex-1 grid-cols-7 divide-x border-l\">\n              {weekDays.map((day, index) => (\n                <span key={index} className=\"py-2 text-center text-xs font-medium text-muted-foreground\">\n                  {format(day, \"EE\")} <span className=\"ml-1 font-semibold text-foreground\">{format(day, \"d\")}</span>\n                </span>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <ScrollArea className=\"h-[736px]\" type=\"always\">\n          <div className=\"flex overflow-hidden\">\n            {/* Hours column */}\n            <div className=\"relative w-18\">\n              {hours.map((hour, index) => (\n                <div key={hour} className=\"relative\" style={{ height: \"96px\" }}>\n                  <div className=\"absolute -top-3 right-2 flex h-6 items-center\">\n                    {index !== 0 && <span className=\"text-xs text-muted-foreground\">{format(new Date().setHours(hour, 0, 0, 0), \"hh a\")}</span>}\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Week grid */}\n            <div className=\"relative flex-1 border-l\">\n              <div className=\"grid grid-cols-7 divide-x\">\n                {weekDays.map((day, dayIndex) => {\n                  const dayEvents = singleDayEvents.filter(event => isSameDay(parseISO(event.startDate), day) || isSameDay(parseISO(event.endDate), day));\n                  const groupedEvents = groupEvents(dayEvents);\n\n                  return (\n                    <div key={dayIndex} className=\"relative\">\n                      {hours.map((hour, index) => {\n                        const isDisabled = !isWorkingHour(day, hour, workingHours);\n\n                        return (\n                          <div key={hour} className={cn(\"relative\", isDisabled && \"bg-calendar-disabled-hour\")} style={{ height: \"96px\" }}>\n                            {index !== 0 && <div className=\"pointer-events-none absolute inset-x-0 top-0 border-b\"></div>}\n\n                            <DroppableTimeBlock date={day} hour={hour} minute={0}>\n                              <div className=\"absolute inset-x-0 top-0 h-[24px] cursor-pointer transition-colors hover:bg-accent\" onClick={() => onAdd?.({ startDate: day, hour, minute: 0 })} />\n                            </DroppableTimeBlock>\n\n                            <DroppableTimeBlock date={day} hour={hour} minute={15}>\n                              <div className=\"absolute inset-x-0 top-[24px] h-[24px] cursor-pointer transition-colors hover:bg-accent\" onClick={() => onAdd?.({ startDate: day, hour, minute: 15 })} />\n                            </DroppableTimeBlock>\n\n                            <div className=\"pointer-events-none absolute inset-x-0 top-1/2 border-b border-dashed\"></div>\n\n                            <DroppableTimeBlock date={day} hour={hour} minute={30}>\n                              <div className=\"absolute inset-x-0 top-[48px] h-[24px] cursor-pointer transition-colors hover:bg-accent\" onClick={() => onAdd?.({ startDate: day, hour, minute: 30 })} />\n                            </DroppableTimeBlock>\n\n                            <DroppableTimeBlock date={day} hour={hour} minute={45}>\n                              <div className=\"absolute inset-x-0 top-[72px] h-[24px] cursor-pointer transition-colors hover:bg-accent\" onClick={() => onAdd?.({ startDate: day, hour, minute: 45 })} />\n                            </DroppableTimeBlock>\n                          </div>\n                        );\n                      })}\n\n                      {groupedEvents.map((group, groupIndex) =>\n                        group.map(event => {\n                          let style = getEventBlockStyle(event, day, groupIndex, groupedEvents.length, { from: earliestEventHour, to: latestEventHour });\n                          const hasOverlap = groupedEvents.some(\n                            (otherGroup, otherIndex) =>\n                              otherIndex !== groupIndex &&\n                              otherGroup.some(otherEvent =>\n                                areIntervalsOverlapping(\n                                  { start: parseISO(event.startDate), end: parseISO(event.endDate) },\n                                  { start: parseISO(otherEvent.startDate), end: parseISO(otherEvent.endDate) }\n                                )\n                              )\n                          );\n\n                          if (!hasOverlap) style = { ...style, width: \"100%\", left: \"0%\" };\n\n                          return (\n                            <div key={event.id} className=\"absolute p-1\" style={style}>\n                              <EventBlock event={event} />\n                            </div>\n                          );\n                        })\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n\n              <CalendarTimeline firstVisibleHour={earliestEventHour} lastVisibleHour={latestEventHour} />\n            </div>\n          </div>\n        </ScrollArea>\n      </div>\n    </>\n  );\n}\n\nfunction WeekViewMultiDayEventsRow({\n  selectedDate,\n  multiDayEvents\n}: {\n  selectedDate: Date;\n  multiDayEvents: IEvent[]\n}) {\n  const weekStart = startOfWeek(selectedDate);\n  const weekEnd = endOfWeek(selectedDate);\n  const weekDays = Array.from({ length: 7 }, (_, i) => addDays(weekStart, i));\n\n  const processedEvents = useMemo(() => {\n    return multiDayEvents\n      .map(event => {\n        const start = parseISO(event.startDate);\n        const end = parseISO(event.endDate);\n        const adjustedStart = isBefore(start, weekStart) ? weekStart : start;\n        const adjustedEnd = isAfter(end, weekEnd) ? weekEnd : end;\n        const startIndex = differenceInDays(adjustedStart, weekStart);\n        const endIndex = differenceInDays(adjustedEnd, weekStart);\n\n        return {\n          ...event,\n          adjustedStart,\n          adjustedEnd,\n          startIndex,\n          endIndex,\n        };\n      })\n      .sort((a, b) => {\n        const startDiff = a.adjustedStart.getTime() - b.adjustedStart.getTime();\n        if (startDiff !== 0) return startDiff;\n        return b.endIndex - b.startIndex - (a.endIndex - a.startIndex);\n      });\n  }, [multiDayEvents, weekStart, weekEnd]);\n\n  const eventRows = useMemo(() => {\n    const rows: (typeof processedEvents)[] = [];\n\n    processedEvents.forEach(event => {\n      let rowIndex = rows.findIndex(row => row.every(e => e.endIndex < event.startIndex || e.startIndex > event.endIndex));\n\n      if (rowIndex === -1) {\n        rowIndex = rows.length;\n        rows.push([]);\n      }\n\n      rows[rowIndex].push(event);\n    });\n\n    return rows;\n  }, [processedEvents]);\n\n  const hasEventsInWeek = useMemo(() => {\n    return multiDayEvents.some(event => {\n      const start = parseISO(event.startDate);\n      const end = parseISO(event.endDate);\n\n      return (\n        // Event starts within the week\n        (start >= weekStart && start <= weekEnd) ||\n        // Event ends within the week\n        (end >= weekStart && end <= weekEnd) ||\n        // Event spans the entire week\n        (start <= weekStart && end >= weekEnd)\n      );\n    });\n  }, [multiDayEvents, weekStart, weekEnd]);\n\n  if (!hasEventsInWeek) {\n    return null;\n  }\n\n  return (\n    <div className=\"hidden overflow-hidden sm:flex\">\n      <div className=\"w-18 border-b\"></div>\n      <div className=\"grid flex-1 grid-cols-7 divide-x border-b border-l\">\n        {weekDays.map((day, dayIndex) => (\n          <div key={day.toISOString()} className=\"flex h-full flex-col gap-1 py-1\">\n            {eventRows.map((row, rowIndex) => {\n              const event = row.find(e => e.startIndex <= dayIndex && e.endIndex >= dayIndex);\n\n              if (!event) {\n                return <div key={`${rowIndex}-${dayIndex}`} className=\"h-6.5\" />;\n              }\n\n              let position: \"first\" | \"middle\" | \"last\" | \"none\" = \"none\";\n\n              if (dayIndex === event.startIndex && dayIndex === event.endIndex) {\n                position = \"none\";\n              } else if (dayIndex === event.startIndex) {\n                position = \"first\";\n              } else if (dayIndex === event.endIndex) {\n                position = \"last\";\n              } else {\n                position = \"middle\";\n              }\n\n              return <MonthEventBadge key={`${event.id}-${dayIndex}`} event={event} cellDate={startOfDay(day)} position={position} />;\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport function EventCalendarDayView() {\n  const { selectedDate, setSelectedDate, singleDayEvents, multiDayEvents, visibleHours, workingHours, view, onAdd } = useEventCalendar();\n\n  if (view !== \"day\") return null;\n\n  const { hours, earliestEventHour, latestEventHour } = getVisibleHours(visibleHours, singleDayEvents);\n\n  const currentEvents = getCurrentEvents(singleDayEvents);\n\n  const dayEvents = singleDayEvents.filter(event => {\n    const eventDate = parseISO(event.startDate);\n    return (\n      eventDate.getDate() === selectedDate.getDate() &&\n      eventDate.getMonth() === selectedDate.getMonth() &&\n      eventDate.getFullYear() === selectedDate.getFullYear()\n    );\n  });\n\n  const groupedEvents = groupEvents(dayEvents);\n\n  return (\n    <div className=\"flex\">\n      <div className=\"flex flex-1 flex-col\">\n        <div>\n          <DayViewMultiDayEventsRow selectedDate={selectedDate} multiDayEvents={multiDayEvents} />\n\n          {/* Day header */}\n          <div className=\"relative z-20 flex border-b\">\n            <div className=\"w-18\"></div>\n            <span className=\"flex-1 border-l py-2 text-center text-xs font-medium text-muted-foreground\">\n              {format(selectedDate, \"EE\")} <span className=\"font-semibold text-foreground\">{format(selectedDate, \"d\")}</span>\n            </span>\n          </div>\n        </div>\n\n        <ScrollArea className=\"h-[800px]\" type=\"always\">\n          <div className=\"flex\">\n            {/* Hours column */}\n            <div className=\"relative w-18\">\n              {hours.map((hour, index) => (\n                <div key={hour} className=\"relative\" style={{ height: \"96px\" }}>\n                  <div className=\"absolute -top-3 right-2 flex h-6 items-center\">\n                    {index !== 0 && <span className=\"text-xs text-muted-foreground\">{format(new Date().setHours(hour, 0, 0, 0), \"hh a\")}</span>}\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Day grid */}\n            <div className=\"relative flex-1 border-l\">\n              <div className=\"relative\">\n                {hours.map((hour, index) => {\n                  const isDisabled = !isWorkingHour(selectedDate, hour, workingHours);\n\n                  return (\n                    <div key={hour} className={cn(\"relative\", isDisabled && \"bg-calendar-disabled-hour\")} style={{ height: \"96px\" }}>\n                      {index !== 0 && <div className=\"pointer-events-none absolute inset-x-0 top-0 border-b\"></div>}\n\n                      <DroppableTimeBlock date={selectedDate} hour={hour} minute={0}>\n                        <div className=\"absolute inset-x-0 top-0 h-[24px] cursor-pointer transition-colors hover:bg-accent\" onClick={() => onAdd?.({ startDate: selectedDate, hour, minute: 0 })} />\n                      </DroppableTimeBlock>\n\n                      <DroppableTimeBlock date={selectedDate} hour={hour} minute={15}>\n                        <div className=\"absolute inset-x-0 top-[24px] h-[24px] cursor-pointer transition-colors hover:bg-accent\" onClick={() => onAdd?.({ startDate: selectedDate, hour, minute: 15 })} />\n                      </DroppableTimeBlock>\n\n                      <div className=\"pointer-events-none absolute inset-x-0 top-1/2 border-b border-dashed\"></div>\n\n                      <DroppableTimeBlock date={selectedDate} hour={hour} minute={30}>\n                        <div className=\"absolute inset-x-0 top-[48px] h-[24px] cursor-pointer transition-colors hover:bg-accent\" onClick={() => onAdd?.({ startDate: selectedDate, hour, minute: 45 })} />\n                      </DroppableTimeBlock>\n\n                      <DroppableTimeBlock date={selectedDate} hour={hour} minute={45}>\n                        <div className=\"absolute inset-x-0 top-[72px] h-[24px] cursor-pointer transition-colors hover:bg-accent\" onClick={() => onAdd?.({ startDate: selectedDate, hour, minute: 45 })} />\n                      </DroppableTimeBlock>\n                    </div>\n                  );\n                })}\n\n                {groupedEvents.map((group, groupIndex) =>\n                  group.map(event => {\n                    let style = getEventBlockStyle(event, selectedDate, groupIndex, groupedEvents.length, { from: earliestEventHour, to: latestEventHour });\n                    const hasOverlap = groupedEvents.some(\n                      (otherGroup, otherIndex) =>\n                        otherIndex !== groupIndex &&\n                        otherGroup.some(otherEvent =>\n                          areIntervalsOverlapping(\n                            { start: parseISO(event.startDate), end: parseISO(event.endDate) },\n                            { start: parseISO(otherEvent.startDate), end: parseISO(otherEvent.endDate) }\n                          )\n                        )\n                    );\n\n                    if (!hasOverlap) style = { ...style, width: \"100%\", left: \"0%\" };\n\n                    return (\n                      <div key={event.id} className=\"absolute p-1\" style={style}>\n                        <EventBlock event={event} />\n                      </div>\n                    );\n                  })\n                )}\n              </div>\n\n              <CalendarTimeline firstVisibleHour={earliestEventHour} lastVisibleHour={latestEventHour} />\n            </div>\n          </div>\n        </ScrollArea>\n      </div>\n\n      <div className=\"hidden w-64 divide-y border-l md:block\">\n        <Calendar className=\"mx-auto w-fit\" mode=\"single\" selected={selectedDate} onSelect={setSelectedDate} initialFocus />\n\n        <div className=\"flex-1 space-y-3\">\n          {currentEvents.length > 0 ? (\n            <div className=\"flex items-start gap-2 px-4 pt-4\">\n              <span className=\"relative mt-[5px] flex size-2.5\">\n                <span className=\"absolute inline-flex size-full animate-ping rounded-full bg-green-400 opacity-75\"></span>\n                <span className=\"relative inline-flex size-2.5 rounded-full bg-green-600\"></span>\n              </span>\n\n              <p className=\"text-sm font-semibold text-foreground\">Happening now</p>\n            </div>\n          ) : (\n            <p className=\"p-4 text-center text-sm italic text-muted-foreground\">No appointments or consultations at the moment</p>\n          )}\n\n          {currentEvents.length > 0 && (\n            <ScrollArea className=\"h-[422px] px-4\" type=\"always\">\n              <div className=\"space-y-6 pb-4\">\n                {currentEvents.map(event => {\n                  return (\n                    <div key={event.id} className=\"space-y-1.5\">\n                      <p className=\"line-clamp-2 text-sm font-semibold\">{event.title}</p>\n\n                      <div className=\"flex items-center gap-1.5 text-muted-foreground\">\n                        <CalendarIcon className=\"size-3.5\" />\n                        <span className=\"text-sm\">{format(new Date(), \"MMM d, yyyy\")}</span>\n                      </div>\n\n                      <div className=\"flex items-center gap-1.5 text-muted-foreground\">\n                        <Clock className=\"size-3.5\" />\n                        <span className=\"text-sm\">\n                          {format(parseISO(event.startDate), \"h:mm a\")} - {format(parseISO(event.endDate), \"h:mm a\")}\n                        </span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </ScrollArea>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}